version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tcg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tcg_mobile
      POSTGRES_USER: tcg_user
      POSTGRES_PASSWORD: tcg_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tcg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tcg_user -d tcg_mobile"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TCG API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tcg-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://tcg_user:tcg_password_2024@postgres:5432/tcg_mobile?schema=public
      JWT_SECRET: tcg-super-secret-jwt-key-2024-change-in-production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: tcg-super-secret-refresh-key-2024-change-in-production
      JWT_REFRESH_EXPIRES_IN: 30d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MAX_FILE_SIZE: 5242880
      UPLOAD_PATH: ./uploads
    volumes:
      - api_uploads:/app/uploads
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tcg-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: tcg-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tcg-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: tcg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - tcg-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local

networks:
  tcg-network:
    driver: bridge
